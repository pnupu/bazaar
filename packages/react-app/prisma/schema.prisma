// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  address   String   @unique
  username  String?  @unique
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
  conversations Conversation[] @relation("UserConversations")
  messages Message[]
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  items Item[]
}

model Item {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String?
  status      String   @default("ACTIVE") // e.g., "ACTIVE", "SOLD", "DELETED"
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      User     @relation(fields: [sellerId], references: [id])
  sellerId    String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
}


model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  participants User[] @relation("UserConversations")
  messages   Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}