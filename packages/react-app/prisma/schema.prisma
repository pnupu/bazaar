// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model Offer {
  id             String       @id @default(cuid())
  amount         Float
  status         String       // "PENDING", "ACCEPTED", "REJECTED"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  buyerId        String
  buyer          User         @relation("BuyerOffers", fields: [buyerId], references: [id])
  sellerId       String
  seller         User         @relation("SellerOffers", fields: [sellerId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  itemId         String
  item           Item         @relation(fields: [itemId], references: [id])
}



model User {
  id                  String         @id @default(cuid())
  address             String         @unique
  username            String?
  bio                 String?
  avatarUrl           String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  sellerConversations Conversation[] @relation("SellerConversations")
  buyerConversations  Conversation[] @relation("BuyerConversations")
  buyerOffers  Offer[] @relation("BuyerOffers")
  sellerOffers Offer[] @relation("SellerOffers")
  messages            Message[]
  Item                Item[]
}

enum ItemStatus {
  SOLD
  AVAILABLE
  DISABLED
}

model Item {
  id            String         @id @default(cuid())
  title         String
  description   String
  price         Float
  imageUrl      String?
  status        ItemStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  longitude     Float?
  latitude      Float?
  placeName     String?
  sellerId      String
  seller        User           @relation(fields: [sellerId], references: [id])
  conversations Conversation[]
  offers Offer[]
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sellerId  String
  buyerId   String
  itemId    String
  seller    User      @relation("SellerConversations", fields: [sellerId], references: [id])
  buyer     User      @relation("BuyerConversations", fields: [buyerId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])
  messages  Message[]
  offers Offer[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}
